#!/usr/bin/env bash
# shellcheck disable=SC2126
#
# Description: Krathalan's Exposure Tracking :)
#
# Homepage: https://github.com/krathalan/ket
# Copyright (C) 2020-2021 Hunter Peavey
# SPDX-License-Identifier: GPL-3.0-or-later

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly DATA_DIR="${HOME}/.local/share/ket"
readonly DATA_FILE="${DATA_DIR}/data.json"

# -----------------------------------------
# --------------- "Library" ---------------
# -----------------------------------------

# Asks a user for a response and prints the response.
# $1: question to print
ask_user()
{
  local user_response

  read -r -p "$1: " user_response

  printf "%s" "${user_response}"
}

# Divides $1 by $2 and then multiplies it by 100 to get a percent.
# Used to determine repeat rates.
calculate_percent()
{
  local to_return=0

  if [[ $2 != 0 ]]; then
    to_return="$(awk "BEGIN{print $1/$2}")"
    to_return="$(awk "BEGIN{print ${to_return}*100}")"
  fi

  printf "%s" "${to_return}"
}

# Exits script with message with exit code 1.
# $1: error message to print
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

# Prints a nice header.
# $1: header message to print
print_header()
{
  # https://stackoverflow.com/questions/5799303/print-a-character-repeatedly-in-bash#17030976
  local -r length="${#1}"
  printf -- "%0.s-" $(seq 1 "${length}")
  printf -- "--------\n|   %s   |\n" "$1"
  printf -- "%0.s-" $(seq 1 "${length}")
  printf -- "--------\n"
}

# Adds up all values in array and prints the result.
# $1: array to add values of
total_array()
{
  local running_total=0

  for entry in "$@"; do
    running_total=$(( running_total + entry ))
  done

  printf "%s" "${running_total}"
}

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

# Used to calculate 
# $1: data field to select, e.g "patient_type"
# $2: data value to match, e.g. "o"
# $3: to print, e.g. "Inpatient"
analyze_helper()
{
  local tmparray
  local total_exposures=0
  local repeat_exposures=0

  mapfile -t tmparray <<< "$(jq -r ".data[] | select(.$1 == \"$2\").total_exposures" "${DATA_FILE}")"
  total_exposures=$(total_array "${tmparray[@]}")
  mapfile -t tmparray <<< "$(jq -r ".data[] | select(.$1 == \"$2\").repeat_exposures" "${DATA_FILE}")"
  repeat_exposures=$(total_array "${tmparray[@]}")

  printf "%s repeat rate: %s%% (%s / %s)\n" "$3" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${repeat_exposures}" "${total_exposures}"
}

# Prints basic repeat rate information
analyze_basic()
{
  print_header "Basic stats"

  local tmparray
  local total_exposures=0
  local total_repeats=0

  mapfile -t tmparray <<< "$(jq -r ".data[].total_exposures" "${DATA_FILE}")"
  total_exposures=$(total_array "${tmparray[@]}")

  mapfile -t tmparray <<< "$(jq -r ".data[].repeat_exposures" "${DATA_FILE}")"
  total_repeats=$(total_array "${tmparray[@]}")

  printf "Total exposures: %s\nTotal repeats: %s\nOverall repeat rate: %s%%\n" "${total_exposures}" "${total_repeats}" "$(calculate_percent "${total_repeats}" "${total_exposures}")"
}

# Prints repeat rates per patient type
#   e - emergency dept (not portable)
#   i - inpatient (in x-ray room)
#   o - outpatient (in x-ray room)
#   p - portable (either ed or inpatient)
analyze_type()
{
  print_header "By patient type"
  local prettyprint=""
  local -r list_of_types=("e" "i" "o" "p")

  for patient_type in "${list_of_types[@]}"; do
    case "${patient_type}" in
      e) prettyprint="Emergency department" ;;
      i) prettyprint="Inpatient" ;;
      o) prettyprint="Outpatient" ;;
      p) prettyprint="Portable" ;;
    esac
    analyze_helper "patient_type" "${patient_type}" "${prettyprint}"
  done
}

# Prints repeat rates per day of the week
analyze_day_of_week()
{
  print_header "By day of week"
  local -r list_of_days=("Sun" "Mon" "Tues" "Wed")

  for day in "${list_of_days[@]}"; do
    analyze_helper "day_of_week" "${day}" "${day}"
  done
}

# Prints repeat rates per shift
#   m - morning
#   e - evening
#   w - weekend
analyze_shift()
{
  print_header "By shift"
  local prettyprint=""
  local -r list_of_shifts=("m" "e" "w")

  for shift_hours in "${list_of_shifts[@]}"; do
    case "${shift_hours}" in
      m) prettyprint="Morning shift" ;;
      e) prettyprint="Evening shift" ;;
      w) prettyprint="Weekend shift" ;;
    esac

    analyze_helper "shift" "${shift_hours}" "${prettyprint}"
  done

  print_header "By hour of day, for each shift"
  local -r list_of_hours=(8 9 10 11 12 13 14 15 16 17 18 19 20 21)
  for hour in "${list_of_hours[@]}"; do
    analyze_helper "hour_of_day" "${hour}" "${hour}:00-${hour}:59"
  done
}

# Performs all available analysis on saved data
analyze()
{
  shift

  if [[ "$#" == 0 ]] || [[ "$1" == "all" ]]; then
    analyze_basic
    analyze_type
    analyze_day_of_week
    analyze_shift
    exit
  fi

  case "$1" in
    "basic") analyze_basic;;
    "patient-type") analyze_type;;
    "day-of-week") analyze_day_of_week;;
    "shift") analyze_shift;;
  esac
}

new_entry()
{
  # We need:
  # - exam type (chest, lumbar, etc)
  # - total exposure # (including repeats)
  # - repeat exposure #
  # - repeat reason(s)
  # - patient type (in/out/port)
  # - patient habitus (light/average/heavy, tall/average/short)
  # - autorecord date/time 

  # exam type
  local shift_hours
  local exam_type
  local total_exposures
  local repeat_exposures
  local repeated_views
  local repeat_reasons
  local patient_type
  local patient_age

  shift_hours="$(ask_user "Shift (m/e/w)")"
  tech="$(ask_user "Tech you worked with")"
  exam_type="$(ask_user "Exam type")"
  total_exposures="$(ask_user "Total number of EXPOSURES")"

  repeat_exposures="$(ask_user "Total number of REPEATS")"
  # If more than 1 repeat, ask for views and reasons
  if [[ "${repeat_exposures}" -gt 0 ]]; then
    repeated_views="$(ask_user "Repeated view(s) (separated by space)")"
    repeat_reasons="$(ask_user "Repeat reason(s)")"
  else
    repeated_views=""
    repeat_reasons=""
  fi

  patient_type="$(ask_user "Patient type (e/i/o/p)")"
  patient_age="$(ask_user "Patient age")"
    
  local -r tmpjson="$(jq ".data[.data | length] |= . + {\"tech\":\"${tech}\",\"shift\":\"${shift_hours}\",\"exam_type\":\"${exam_type}\",\"total_exposures\":${total_exposures},\"repeat_exposures\":${repeat_exposures},\"repeated_views\":\"${repeated_views}\",\"repeat_reasons\":\"${repeat_reasons}\",\"patient_type\":\"${patient_type}\",\"patient_age\":${patient_age},\"hour_of_day\":$(date +%H),\"day_of_week\":\"$(date +%a)\",\"month\":\"$(date +%b)\",\"year\":$(date +%Y),\"week_of_year\":$(date +%U)}" "${DATA_FILE}")"
  printf "%s" "${tmpjson}" > "${DATA_FILE}"

  printf "\nCreated exposure entry\n"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

[[ ! -d "${DATA_DIR}" ]] &&
  mkdir -p "${DATA_DIR}"

[[ ! -f "${DATA_FILE}" ]] &&
  printf "{\"data\": []}" > "${DATA_FILE}"

case "$1" in
  analyze) analyze "$@" ;;
  exam) exam_info ;;
  new) new_entry ;;
  *) print_help ;;
esac