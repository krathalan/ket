#!/usr/bin/env bash
# shellcheck disable=SC2126
#
# Description: Krathalan's Exposure Tracking :)
#
# Homepage: https://github.com/krathalan/ket
# Copyright (C) 2020-2021 Hunter Peavey
# SPDX-License-Identifier: GPL-3.0-or-later

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

trap "clean_up" EXIT

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly DATA_DIR="${HOME}/.local/share/ket"
readonly DATA_FILE="${DATA_DIR}/data.json"
readonly SCRIPT_NAME="${0##*/}"

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

calculate_percent()
{
  local to_return=0

  if [[ $2 != 0 ]]; then
    to_return="$(awk "BEGIN{print $1/$2}")"
    to_return="$(awk "BEGIN{print ${to_return}*100}")"
  fi

  printf "%s" "${to_return}"
}

total_array()
{
  local running_total=0

  for entry in "$@"; do
    running_total=$(( running_total + entry ))
  done

  printf "%s" "${running_total}"
}

# $1: data field to select, e.g "patient_type"
# $2: data value to match, e.g. "o"
# $3: to print, e.g. "Inpatient"
analyze_helper()
{
  local tmparray
  local total_exposures=0
  local repeat_exposures=0

  mapfile -t tmparray <<< "$(jq -r ".data[] | select(.$1 == \"$2\").total_exposures" "${DATA_FILE}")"
  total_exposures=$(total_array "${tmparray[@]}")
  mapfile -t tmparray <<< "$(jq -r ".data[] | select(.$1 == \"$2\").repeat_exposures" "${DATA_FILE}")"
  repeat_exposures=$(total_array "${tmparray[@]}")

  printf "%s repeat rate: %s%% (%s / %s)\n" "$3" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${repeat_exposures}" "${total_exposures}"
}

analyze()
{
  local tmparray
  local total_exposures=0
  local total_repeats=0

  # Total overall repeat rate
  mapfile -t tmparray <<< "$(jq -r ".data[].total_exposures" "${DATA_FILE}")"
  total_exposures=$(total_array "${tmparray[@]}")

  mapfile -t tmparray <<< "$(jq -r ".data[].repeat_exposures" "${DATA_FILE}")"
  total_repeats=$(total_array "${tmparray[@]}")

  printf "Total exposures: %s\nTotal repeats: %s\nOverall repeat rate: %s%%\n" "${total_exposures}" "${total_repeats}" "$(calculate_percent "${total_repeats}" "${total_exposures}")"
  
  # Repeat rates per patient type
  analyze_helper "patient_type" "i" "Inpatient"
  analyze_helper "patient_type" "o" "Outpatient"
  analyze_helper "patient_type" "p" "Portable"
  
  # Patient habitus
  # l a h (light average heavy)
  # t a s (tall average short)
  # lt la ls at aa as ht ha hs

  # Day of week

  # Time of day

  # Would like to calculate these per exam
  # Most frequently repeated exam
  # Least frequently repeated exam
}

ask_user()
{
  local user_response

  read -r -p "$1: " user_response

  printf "%s" "${user_response}"
}

clean_up()
{
  if [[ -d "${TMP_DIR:-}" ]]; then
    rm -rf "${TMP_DIR}"
  fi
}

make_tmp()
{
  readonly TMP_DIR="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"
}

new_entry()
{
  # We need:
  # - exam type (chest, lumbar, etc)
  # - total exposure # (including repeats)
  # - repeat exposure #
  # - repeat reason(s)
  # - patient type (in/out/port)
  # - patient habitus (light/average/heavy, tall/average/short)
  # - autorecord date/time 

  # exam type
  local exam_type
  local total_exposures
  local repeat_exposures
  local repeated_views
  local repeat_reasons
  local patient_type
  local patient_age
  local patient_habitus

  exam_type="$(ask_user "Exam type")"

  # total exposures
  total_exposures="$(ask_user "Total number of EXPOSURES")"

  # repeat exposures
  repeat_exposures="$(ask_user "Total number of REPEATS")"

  # If more than 1 repeat, ask for views and reasons
  if [[ "${repeat_exposures}" -gt 0 ]]; then
    repeated_views="$(ask_user "Repeated view(s) (separated by space)")"
    repeat_reasons="$(ask_user "Repeat reason(s)")"
  else
    repeated_views=""
    repeat_reasons=""
  fi

  # patient type
  patient_type="$(ask_user "Patient type (i/o/p)")"

  # patient type
  patient_age="$(ask_user "Patient age")"

  # patient habitus
  patient_habitus="$(ask_user "Weight (l/a/h) + height (t/a/s)")"
    
  local -r tmpjson="$(jq ".data[.data | length] |= . + {\"exam_type\":\"${exam_type}\",\"total_exposures\":${total_exposures},\"repeat_exposures\":${repeat_exposures},\"repeated_views\":\"${repeated_views}\",\"repeat_reasons\":\"${repeat_reasons}\",\"patient_type\":\"${patient_type}\",\"patient_age\":${patient_age},\"patient_habitus\":\"${patient_habitus}\",\"hour_of_day\":$(date +%H),\"day_of_week\":\"$(date +%a)\",\"month\":\"$(date +%b)\",\"year\":$(date +%Y),\"week_of_year\":$(date +%U)}" "${DATA_FILE}")"
  printf "%s" "${tmpjson}" > "${DATA_FILE}"

  printf "\nCreated exposure entry\n"
}

exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

[[ ! -d "${DATA_DIR}" ]] &&
  mkdir -p "${DATA_DIR}"

[[ ! -f "${DATA_FILE}" ]] &&
  printf "{\"data\": []}" > "${DATA_FILE}"

case "$1" in
  analyze) analyze;;
  new) new_entry ;;
  *) print_help ;;
esac