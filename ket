#!/usr/bin/env bash
# shellcheck disable=SC2126
#
# Description: Krathalan's Exposure Tracking :)
#
# Homepage: https://github.com/krathalan/ket
# Copyright (C) 2020-2021 Hunter Peavey
# SPDX-License-Identifier: GPL-3.0-or-later

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
GREEN=$(tput bold && tput setaf 2)
readonly GREEN
YELLOW=$(tput sgr0 && tput setaf 3)
readonly YELLOW
RED=$(tput bold && tput setaf 1)
readonly RED
NC=$(tput sgr0) # No color/turn off all tput attributes
readonly NC

# Other
TMP_DIR="$(mktemp -d -t "ket_XXXXXXXX")"
readonly TMP_DIR
readonly DATA_FILE="${TMP_DIR}/data.json"
readonly TMP_JSON="${TMP_DIR}/tmp.json"
readonly TMP_OUTPUT="${TMP_DIR}/output.txt"

readonly DATA_DIR="${HOME}/.local/share/ket"
readonly DATA_FILE_PERM="${DATA_DIR}/data.json.br"

# Clean up tmp dir always on exit
trap "clean_up" EXIT

# -----------------------------------------
# --------------- "Library" ---------------
# -----------------------------------------

# Asks a user for a response and prints the response.
# $1: question to print
ask_user()
{
  local user_response

  read -r -p "$1: " user_response

  printf "%s" "${user_response}"
}

# Divides $1 by $2 and then multiplies it by 100 to get a percent.
# Used to determine repeat rates.
calculate_percent()
{
  local to_return=0

  if [[ $2 != 0 ]]; then
    to_return="$(awk "BEGIN{print $1/$2}")"
    to_return="$(awk -v OFMT="%.2f" "BEGIN{print ${to_return}*100}")"
  fi

  printf "%s" "${to_return}"
}

# Deletes tmp dir if exists
clean_up()
{
  if [[ -d "${TMP_DIR}" ]]; then
    rm -rf "${TMP_DIR}"
  fi
}

# Exits script with message with exit code 1.
# $1: error message to print
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

# Ensures valid input
# $1: type of input, e.g. shift, exam, number
# $2: input to check
match()
{
  local -r valid_number_regex='^[0-9]+$'

  case "$1" in
    exam)
        case "$2" in
          chest|ribs|chest-lateral-decub|sternum|upper-airway|thumb|finger|hand|wrist|forearm|elbow|humerus|shoulder|clavicle|scapula|ac-joints|toe|foot|ankle|knee|tib-fib|femur|patella|calcaneus|skull|sinuses|facial-bones|orbits|zygomatic-arches|nasal-bones|mandible|tmj|cspine|tspine|lspine|pelvis|hip|sacrum|coccyx|sacrum-coccyx|scoliosis|si-joints|abdomen|abdomen-upright|abdomen-decub|ivu|ugi|barium-enema|esophagram|sbft|cysto|ercp|myelo|arthro|hsg|c-arm|bone-survey|other) return 0 ;;
          *) return 1 ;;
        esac
        ;;
    equipment)
        case "$2" in
          1|2|3|n|o) return 0 ;;
          *) return 1 ;;
        esac
        ;;
    patient_type)
        case "$2" in
          e|i|o|p) return 0 ;;
          *) return 1 ;;
        esac
        ;;
    shift)
        case "$2" in
          m|e|w) return 0 ;;
          *) return 1 ;;
        esac
        ;;
    age|exposures|number)
        if [[ $2 =~ $valid_number_regex ]] ; then
          return 0
        else
          return 1
        fi
        ;;
  esac
}

# Prints a nice header.
# $1: header message to print
print_header()
{
  # https://stackoverflow.com/questions/5799303/print-a-character-repeatedly-in-bash#17030976
  local -r length="${#1}"
  printf "%s" "${GREEN}"
  printf -- "%0.s-" $(seq 1 "${length}")
  printf -- "--------\n|   %s%s%s   |\n" "${YELLOW}" "$1" "${GREEN}"
  printf -- "%0.s-" $(seq 1 "${length}")
  printf -- "--------\n%s" "${NC}"
}

print_help()
{
  printf "%s" "\
ket - Krathalan's exposure tracker

Track your repeated exposures and figure out why you are
repeating the projections you're repeating.

Usage: ket [COMMAND] (args...)

Commands:
${GREEN}new${NC}, e.g. \"ket new\"
    Create a new entry, entering the details of the exam
    you just completed.

${GREEN}delete-last${NC}, e.g. \"ket delete-last\"
    Delete the last entry you just added, in case you
    realize you put it in wrong.

${GREEN}today${NC}, e.g. \"ket today\"
    Print out all the exams you have completed today.

${GREEN}all${NC}, e.g. \"ket all\"
    Print out all exams you've ever done. Might take a while.

${GREEN}analyze${NC}, e.g. \"ket analyze exam\"
    Analyze your repeat rates by various factors. You can
    optionally provide an argument after analyze, such as
    age, basic, day-of-week, equipment, exam, patient-type,
    repeat-reasons, shift, or week, to show analysis
    only for that factor.

${GREEN}list${NC} ARG, e.g. \"ket list age --verbose\"
    List some most common factors for repeats for that sub-
    category. Requires an argument, either age or exam. You
    can optionally provide -v or --verbose to additionally print
    all exams completed for that subcategory.

${GREEN}help${NC}, e.g. \"ket help\"
    Print this help
"
}

# Adds up all values in array and prints the result.
# $1: array to add values of
total_array()
{
  local running_total=0

  for entry in "$@"; do
    running_total=$(( running_total + entry ))
  done

  printf "%s" "${running_total}"
}

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

# Used to generically calculate repeat rates
# $1: data field to select, e.g "patient_type"
# $2: data value to match, e.g. "o"
# $3: to print, e.g. "Inpatient"
analyze_helper()
{
  local tmparray
  local total_exposures=0
  local repeat_exposures=0

  if [[ "$#" == 3 ]]; then
    local argtwo="\"$2\""
  elif [[ "$1" == "--unquote" ]]; then
    argtwo="$3"
    shift
  fi

  mapfile -t tmparray <<< "$(jq -r ".data[] | select(.$1 == ${argtwo}).total_exposures" "${DATA_FILE}")"
  total_exposures=$(total_array "${tmparray[@]}")
  mapfile -t tmparray <<< "$(jq -r ".data[] | select(.$1 == ${argtwo}).repeat_exposures" "${DATA_FILE}")"
  repeat_exposures=$(total_array "${tmparray[@]}")

  if [[ "${total_exposures}" == 0 ]] && [[ "${repeat_exposures}" == 0 ]]; then
    return
  fi

  printf "%s rate: %s%% (%sE/%sR)\n" "$3" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${total_exposures}" "${repeat_exposures}"
}

# Prints repeat rates per age bracket
analyze_age()
{
  print_header "By age bracket"
  local range_low=1
  local range_high=10

  while [[ "${range_high}" -lt 120 ]]; do
    mapfile -t tmparray <<< "$(jq -r ".data[] | select(.patient_age <= ${range_high}) | select(.patient_age >= ${range_low}).total_exposures" "${DATA_FILE}")"
    total_exposures=$(total_array "${tmparray[@]}")
    mapfile -t tmparray <<< "$(jq -r ".data[] | select(.patient_age >= ${range_low}) | select(.patient_age <= ${range_high}).repeat_exposures" "${DATA_FILE}")"
    repeat_exposures=$(total_array "${tmparray[@]}")

    printf "%s rate: %s%% (%sE/%sR)\n" "${range_low}-${range_high}" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${total_exposures}" "${repeat_exposures}"

    # Increase age range bracket
    range_low=$(( range_low + 10 ))
    range_high=$(( range_high + 10 ))
  done
}

# Prints basic repeat rate information
analyze_basic()
{
  print_header "Basic stats"

  local tmparray
  local total_exposures=0
  local total_repeats=0

  mapfile -t tmparray <<< "$(jq -r ".data[].total_exposures" "${DATA_FILE}")"
  total_exposures=$(total_array "${tmparray[@]}")

  mapfile -t tmparray <<< "$(jq -r ".data[].repeat_exposures" "${DATA_FILE}")"
  total_repeats=$(total_array "${tmparray[@]}")

  printf "Total exposures: %s\nTotal repeats: %s\nOverall repeat rate: %s%%\n" "${total_exposures}" "${total_repeats}" "$(calculate_percent "${total_repeats}" "${total_exposures}")"
}

# Prints repeat rates per day of the week and average exposures per day
analyze_day_of_week()
{
  print_header "By day of week, total exposures"
  local -r list_of_days=("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat")

  for day in "${list_of_days[@]}"; do
    analyze_helper "day_of_week" "${day}" "${day}"
  done

  printf "\n"

  print_header "By day of week, average exposures per day"

  local uniqueWeeks
  local tmparray
  local total_exposures

  for day in "${list_of_days[@]}"; do
    # Calculate how many of this day we have different weeks for
    uniqueWeeks="$(jq -r ".data[] | select(.day_of_week == \"${day}\").week_of_year" "${DATA_FILE}" | uniq | wc -l)"

    if [[ "${uniqueWeeks}" -eq 0 ]]; then
      continue
    fi

    # Get total number of exposures for this day
    mapfile -t tmparray <<< "$(jq -r ".data[] | select(.day_of_week == \"${day}\").total_exposures" "${DATA_FILE}")"
    total_exposures=$(total_array "${tmparray[@]}")

    # Divide total exposures by how many of this day we have different weeks for
    printf "%s: %s avg E/day\n" "${day}" "$(echo "scale=1; ${total_exposures} / ${uniqueWeeks}" | bc -l)"
  done
}

# Prints repeat rates per room/portable used
analyze_equipment()
{
  print_header "By room/equipment"
  local prettyprint=""
  local -r list_of_equipment=("1" "2" "3" "n" "o")

  for equipment in "${list_of_equipment[@]}"; do
    case "${equipment}" in
      1) prettyprint="Room 1" ;;
      2) prettyprint="Room 2" ;;
      3) prettyprint="Room 3" ;;
      n) prettyprint="New portable" ;;
      o) prettyprint="Old portable" ;;
    esac

    analyze_helper "equipment" "${equipment}" "${prettyprint}"
  done
}

# Prints repeat rates per exam type
analyze_exam()
{
  print_header "By exam type"
  local -r list_of_exams=("chest" "ribs" "chest-lateral-decub" "sternum" "upper-airway" "thumb" "finger" "hand" "wrist" "forearm" "elbow" "humerus" "shoulder" "clavicle" "scapula" "ac-joints" "toe" "foot" "ankle" "knee" "tib-fib" "femur" "patella" "calcaneus" "skull" "sinuses" "facial-bones" "orbits" "zygomatic-arches" "nasal-bones" "mandible" "tmj" "cspine" "tspine" "lspine" "pelvis" "hip" "sacrum" "coccyx" "sacrum-coccyx" "scoliosis" "si-joints" "abdomen" "abdomen-upright" "abdomen-decub" "ivu" "ugi" "barium-enema" "esophagram" "sbft" "cysto" "ercp" "myelo" "arthro" "hsg" "c-arm" "other")

  for exam in "${list_of_exams[@]}"; do
    analyze_helper "exam_type" "${exam}" "${exam}"
  done
}

analyze_repeat_reasons()
{
  print_header "By repeat reason"
  jq -r ".data[].repeat_reasons" "${DATA_FILE}" | sed '/^$/d' | sed 's/ /\n/g' | sort | uniq -c | sort -n --reverse | sed -e 's/^[ \t]*//'
}

# Prints repeat rates per shift
#   m - morning
#   e - evening
#   w - weekend
analyze_shift()
{
  print_header "By shift"
  local prettyprint=""
  local -r list_of_shifts=("m" "e" "w") # mew :3

  for shift_hours in "${list_of_shifts[@]}"; do
    case "${shift_hours}" in
      m) prettyprint="Morning shift" ;;
      e) prettyprint="Evening shift" ;;
      w) prettyprint="Weekend shift" ;;
    esac

    analyze_helper "shift" "${shift_hours}" "${prettyprint}"
  done

  printf "\n"

  local -r list_of_hours=(8 9 10 11 12 13 14 15 16 17 18 19 20 21)
  local tmparray
  local total_exposures=0
  local repeat_exposures=0
  for shift_hours in "${list_of_shifts[@]}"; do
    case "${shift_hours}" in
      m) prettyprint="morning shift" ;;
      e) prettyprint="evening shift" ;;
      w) prettyprint="weekend shift" ;;
    esac

    print_header "By hour of day, for ${prettyprint}"

    for hour in "${list_of_hours[@]}"; do
      mapfile -t tmparray <<< "$(jq -r ".data[] | select(.shift == \"${shift_hours}\") | select(.hour_of_day == ${hour}) | .total_exposures" "${DATA_FILE}")"
      total_exposures=$(total_array "${tmparray[@]}")
      mapfile -t tmparray <<< "$(jq -r ".data[] | select(.shift == \"${shift_hours}\") | select(.hour_of_day == ${hour}) | .repeat_exposures" "${DATA_FILE}")"
      repeat_exposures=$(total_array "${tmparray[@]}")

      if [[ "${total_exposures}" == 0 ]] && [[ "${repeat_exposures}" == 0 ]]; then
        continue
      fi

      printf "%s:00-%s:59 repeat rate: %s%% (%sE/%sR)\n" "${hour}" "${hour}" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${total_exposures}" "${repeat_exposures}"
    done

    printf "\n"
  done
}

# Prints repeat rates per patient type
analyze_type()
{
  print_header "By patient type"
  local prettyprint=""
  local -r list_of_types=("e" "i" "o" "p")

  for patient_type in "${list_of_types[@]}"; do
    case "${patient_type}" in
      e) prettyprint="Emergency department" ;;
      i) prettyprint="Inpatient" ;;
      o) prettyprint="Outpatient" ;;
      p) prettyprint="Portable" ;;
    esac
    analyze_helper "patient_type" "${patient_type}" "${prettyprint}"
  done
}

analyze_week()
{
  print_header "By week of year"
  local prettyprint=""

  for week in {1..53}; do
    prettyprint="Week ${week}"
    analyze_helper --unquote "week_of_year" "${week}" "${prettyprint}"
  done
}

# Performs all available analysis on saved data
analyze_master()
{
  shift

  if [[ "$#" == 0 ]] || [[ "$1" == "all" ]]; then
    local -r analysis_types=("age" "basic" "day_of_week" "equipment" "exam" "repeat_reasons" "shift" "type" "week")
    for analysis in "${analysis_types[@]}"; do
      analyze_"${analysis}"
      printf "\n"
    done
    return
  fi

  case "$1" in
    "age") analyze_age ;;
    "basic") analyze_basic ;;
    "day-of-week") analyze_day_of_week ;;
    "equipment") analyze_equipment ;;
    "exam") analyze_exam ;;
    "patient-type") analyze_type ;;
    "repeat-reasons") analyze_repeat_reasons ;;
    "shift") analyze_shift ;;
    "week") analyze_week ;;
    *) exit_script_on_failure "Command \"analyze $1\" not recognized"
  esac
}

# Helps new_entry ask for input repeatedly
# $1: what to match
# $2: what to ask user
new_entry_helper()
{
  local to_return=""
  to_return="$(ask_user "$2")"

  while ! match "$1" "${to_return}"; do
    to_return="$(ask_user "Incorrect input. $2")"
  done

  printf "%s" "${to_return}"
}

# Prints valid/suggested input values for the user
# $1: what to match
print_entry_help()
{
  printf "\n"
  case "$1" in
    patient_type)
      printf "%s" "\
  e - emergency department (not portable)
  i - inpatient (not portable)
  o - outpatient (not portable)
  p - portable (inpatient or emergency dept)
" ;;
    equipment)
      printf "%s" "\
  1/2/3 - rooms 1/2/3
  n     - new portable
  o     - old portable
" ;;
    shift)
      printf "%s" "\
  m - morning
  e - evening
  w - weekend
" ;;
    exam)
      printf "%s" "\
  chest                  knee                coccyx
  ribs                   tib-fib             sacrum-coccyx
  chest-lateral-decub    femur               scoliosis
  sternum                patella             si-joints
  upper-airway           calcaneus           abdomen
  thumb                  skull               abdomen-upright
  finger                 sinuses             abdomen-decub
  hand                   facial-bones        ivu
  wrist                  orbits              ugi
  forearm                zygomatic-arches    barium-enema
  elbow                  nasal-bones         esophagram
  humerus                mandible            sbft
  shoulder               tmj                 cysto
  clavicle               cspine              ercp
  scapula                tspine              myelo
  ac-joints              lspine              arthro
  toe                    pelvis              hsg
  foot                   hip                 c-arm
  ankle                  sacrum              bone-survey
  other
" ;;
    repeated_views)
      printf "%s" "\
  ap                     ap-oblique
  pa                     pa-oblique
  lateral                grashey
  oblique                axillary
  internal-oblique       sunrise
  external-oblique       flexion
  decubitus              extension
  left-lateral-decub     fuchs
  right-lateral-decub    swimmers
  frog                   other
" ;;
    repeat_reasons)
      printf "%s" "\
  centering-left     underexposed
  centering-right    overexposed
  centering-high     equipment-error
  centering-low      other-positioning
  aec-sid            overrotated
  artifact           underrotated
  rotation           wrong-sid
  tilt               other-equipment
  anatomy-cutoff     other
  marker-in-anatomy
  wrong-marker
" ;;
    *) ;;
  esac
}

# Pretty prints all exposure entries from all time
show_all()
{
  printf "Printing all exposure entries. Please be patient..."

  local json_index=0
  local json_parser
  json_parser="$(jq -r .data[${json_index}] "${DATA_FILE}")"

  while [[ "${json_parser}" != "null" ]]; do
    show_today_helper "$(( json_index + 1 ))" "${json_parser}" &

    json_index=$(( json_index + 1 ))
    json_parser="$(jq -r .data[${json_index}] "${DATA_FILE}")"
  done

  # Wait for all "show_today_helper ... &"s to finish
  wait

  if [[ -f "${TMP_OUTPUT}" ]]; then
    printf "\n\n"
    sort -n "${TMP_OUTPUT}"
  else
    exit_script_on_failure "No exams performed yet"
  fi
}

# Pretty prints all the exposure entries from today
show_today()
{
  # Filter entries to today, then output it as an array in a tmp file
  jq -r ".data[] | select(.locale_date == \"$(date +%x)\")" "${DATA_FILE}" | jq -s > "${TMP_JSON}"

  local json_index=0
  local json_parser
  json_parser="$(jq -r .[${json_index}] "${TMP_JSON}")"

  while [[ "${json_parser}" != "null" ]]; do
    show_today_helper "$(( json_index + 1 ))" "${json_parser}" &

    json_index=$(( json_index + 1 ))
    json_parser="$(jq -r .[${json_index}] "${TMP_JSON}")"
  done

  # Wait for all "show_today_helper ... &"s to finish
  wait

  if [[ -f "${TMP_OUTPUT}" ]]; then
    sort -n "${TMP_OUTPUT}" 
  else
    exit_script_on_failure "No exams performed yet today"
  fi

  # Get total and repeat exposures for today only
  local to_add
  mapfile -t to_add <<< "$(jq -r ".[].total_exposures" "${TMP_JSON}")"
  local -r total_exposures="$(total_array "${to_add[@]}")"
  mapfile -t to_add <<< "$(jq -r ".[].repeat_exposures" "${TMP_JSON}")"
  local -r repeat_exposures="$(total_array "${to_add[@]}")"

  printf "\nToday's overall repeat rate: %s%% (%sR/%sE)\n" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${repeat_exposures}" "${total_exposures}"
}

# Extracts json data to help show_today go faster; prints to $TMP_OUTPUT
# $1: index to print
# $2: json data
show_today_helper()
{
  local alldata
  mapfile -t alldata <<< "$(jq -r ".exam_type, .total_exposures, .repeat_exposures, .equipment, .patient_type, .patient_age, .exact_time, .locale_date" <<< "$2")"

  # 0 exam type
  # 1 total exposures
  # 2 repeat exposures
  # 3 equipment
  # 4 patient type
  # 5 patient age
  # 6 exact time
  # 7 locale date

  # If at least one repeat, also list repeat reasons
  if [[ "${alldata[2]}" -gt 0 ]]; then
    # Get repeat reasons
    local -r repeat_reasons="$(jq -r ".repeat_reasons" <<< "$2")"
    printf "%s. (%s @ %s) [%sE/%sR] %s y/o %s, %s (RR: %s)\n" "$1" "${alldata[7]}"  "${alldata[6]}" "${alldata[1]}" "${alldata[2]}" "${alldata[5]}" "${alldata[0]}" "$(format_equipment_patient "${alldata[3]}" "${alldata[4]}")" "${repeat_reasons}" >> "${TMP_OUTPUT}"
  else
    printf "%s. (%s @ %s) [%sE/%sR] %s y/o %s, %s\n" "$1" "${alldata[7]}" "${alldata[6]}" "${alldata[1]}" "${alldata[2]}" "${alldata[5]}" "${alldata[0]}" "$(format_equipment_patient "${alldata[3]}" "${alldata[4]}")" >> "${TMP_OUTPUT}"
  fi
}

# Pretty prints a patient type/equipment combo
# $1: equipment (1/2/3/n/o)
# $2: patient type (e/i/o/p)
format_equipment_patient()
{
  local to_print=""

  case "$2" in
    e)
      to_print+="ED"
      ;;
    i)
      to_print+="inpatient"
      ;;
    o)
      to_print+="outpatient"
      ;;
    p)
      to_print+="portable"
      ;;
  esac

  case "$2" in
    e|i|o)
      to_print+=" in room $1"
      ;;
    p)
      to_print+=" ($1)"
      ;;
  esac

  printf "%s" "${to_print}"
}

# Deletes the last exposure entry in the data file.
delete_last_entry()
{
  # Get index of last element
  local index_to_delete
  index_to_delete="$(jq -r ".data | length" "${DATA_FILE}")"
  index_to_delete=$(( index_to_delete - 1 ))

  local -r tmpjson="$(jq -r "del(.data[${index_to_delete}])" "${DATA_FILE}")"
  printf "%s" "${tmpjson}" > "${DATA_FILE}"

  printf "\nDeleted last entry.\n"
}

# Adds a new exposure entry to data.json
new_entry()
{
  local shift_hours
  local exam_type
  local total_exposures
  local repeat_exposures
  local repeated_views
  local repeat_reasons
  local patient_type
  local equipment
  local patient_age

  print_entry_help "shift"
  shift_hours="$(new_entry_helper "shift" "Shift")"
  print_entry_help "exam"
  exam_type="$(new_entry_helper "exam" "Exam type")"
  printf "\n"
  total_exposures="$(new_entry_helper "number" "Total number of EXPOSURES")"

  printf "\n"
  repeat_exposures="$(new_entry_helper "number" "Total number of REPEATS")"
  # If more than 1 repeat, ask for views and reasons
  if [[ "${repeat_exposures}" -gt 0 ]]; then
    print_entry_help "repeated_views"
    repeated_views="$(new_entry_helper "repeated_views" "Repeated view(s)")"
    print_entry_help "repeat_reasons"
    repeat_reasons="$(new_entry_helper "repeat_reasons" "Repeat reason(s)")"
  else
    repeated_views=""
    repeat_reasons=""
  fi

  printf "\n"
  patient_age="$(new_entry_helper "number" "Patient age")"
  print_entry_help "patient_type"
  patient_type="$(new_entry_helper "patient_type" "Patient type")"

  local to_ask=""
  case "${patient_type}" in
    e|i|o) to_ask="Room" ;;
    p) to_ask="Portable" ;;
  esac

  print_entry_help "equipment"
  equipment="$(new_entry_helper "equipment" "${to_ask}")"

  local -r tmpjson="$(jq ".data[.data | length] |= . + {\"shift\":\"${shift_hours}\",\"exam_type\":\"${exam_type}\",\"total_exposures\":${total_exposures},\"repeat_exposures\":${repeat_exposures},\"repeated_views\":\"${repeated_views}\",\"repeat_reasons\":\"${repeat_reasons}\",\"equipment\":\"${equipment}\",\"patient_type\":\"${patient_type}\",\"patient_age\":${patient_age},\"hour_of_day\":$(date +%H),\"day_of_week\":\"$(date +%a)\",\"month\":\"$(date +%b)\",\"year\":$(date +%Y),\"exact_time\":\"$(date "+%H:%M:%S")\",\"week_of_year\":$(date +%U),\"locale_date\":\"$(date +%x)\"}" "${DATA_FILE}")"
  printf "%s" "${tmpjson}" > "${DATA_FILE}"

  printf "\nCreated exposure entry:"
  printf "\n(%s) [%sE/%sR] %s y/o %s, %s\n" "$(date "+%H:%M:%S")" "${total_exposures}" "${repeat_exposures}" "${patient_age}" "${exam_type}" "$(format_equipment_patient "${equipment}" "${patient_type}")"
}

# Category: age; subcategory: 11-20
# Listing should:
# - print repeat rate for that subcategory
# - print a numbered (count) list of repeated EXAMS for that subcategory
# - print a numbered (count) list of repeat REASONS for that subcategory
# - optionally (with -v/--verbose) pretty print all entries within that subcategory

list_master()
{
  shift

  if [[ "$#" == 0 ]] || [[ "$1" == "all" ]]; then
    exit_script_on_failure "Please provide a category to list, either \"age\" or \"exam\"."
  fi

  # List by each data point
  case "$1" in
    "age") list_age "$@" ;;
    "exam") list_exam "$@" ;;
    *) exit_script_on_failure "Command \"list $1\" not recognized"
  esac
}

list_age()
{
  local range_low=1
  local range_high=10

  if [[ $# -gt 1 ]]; then
    shift
    if [[ "$1" == "-v" ]] || [[ "$1" == "--verbose" ]]; then
      local -r verbose="y"
    else
      local -r verbose="n"
    fi
  else
    local -r verbose="n"
  fi

  while [[ "${range_high}" -lt 120 ]]; do
    print_header "Age bracket ${range_low}-${range_high}"

    # First list repeat rate
    mapfile -t tmparray <<< "$(jq -r ".data[] | select(.patient_age <= ${range_high}) | select(.patient_age >= ${range_low}).total_exposures" "${DATA_FILE}")"
    total_exposures=$(total_array "${tmparray[@]}")
    mapfile -t tmparray <<< "$(jq -r ".data[] | select(.patient_age >= ${range_low}) | select(.patient_age <= ${range_high}).repeat_exposures" "${DATA_FILE}")"
    repeat_exposures=$(total_array "${tmparray[@]}")

    printf "Repeat rate: %s%% (%sE/%sR)\n" "$(calculate_percent "${repeat_exposures}" "${total_exposures}")" "${total_exposures}" "${repeat_exposures}"

    # Print a numbered (count) list of repeated EXAMS
    printf "\nMost repeated exams:\n"
    jq -r ".data[] | select(.patient_age <= ${range_high}) | select(.patient_age >= ${range_low}) | select(.repeat_exposures > 0).exam_type" "${DATA_FILE}" | sed '/^$/d' | sed 's/ /\n/g' | sort | uniq -c | sort -n --reverse | sed -e 's/^[ \t]*//'

    # Print a numbered (count) list of repeat REASONS
    printf "\nMost repeat reasons:\n"
    jq -r ".data[] | select(.patient_age <= ${range_high}) | select(.patient_age >= ${range_low}).repeat_reasons" "${DATA_FILE}" | sed '/^$/d' | sed 's/ /\n/g' | sort | uniq -c | sort -n --reverse | sed -e 's/^[ \t]*//'

    # Optionally pretty print all exams performed
    if [[ "${verbose}" == "y" ]]; then
      printf "\nList of all entries for this age range:\n"
      # Filter to new tmpjson
      local tmpjson
      tmpjson="$(jq -r ".data[] | select(.patient_age <= ${range_high}) | select(.patient_age >= ${range_low})" "${DATA_FILE}" | jq -r -s .)"

      # For each entry, print it nicely
      local json_index=0
      local json_parser
      json_parser="$(jq -r .[${json_index}] <<< "${tmpjson}")"

      while [[ "${json_parser}" != "null" ]]; do
        show_today_helper "$(( json_index + 1 ))" "${json_parser}" &

        json_index=$(( json_index + 1 ))
        json_parser="$(jq -r .[${json_index}] <<< "${tmpjson}")"
      done

      wait

      if [[ -f "${TMP_OUTPUT}" ]]; then
        sort -n "${TMP_OUTPUT}"
        printf "\n"
      else
        printf "\nNo exams yet\n"
      fi
    else
      printf "\n"
    fi

    # Need to flush output file
    printf "" > "${TMP_OUTPUT}"

    # Increase age range bracket
    range_low=$(( range_low + 10 ))
    range_high=$(( range_high + 10 ))
  done
}

list_exam()
{
  local -r list_of_exams=("chest" "ribs" "chest-lateral-decub" "sternum" "upper-airway" "thumb" "finger" "hand" "wrist" "forearm" "elbow" "humerus" "shoulder" "clavicle" "scapula" "ac-joints" "toe" "foot" "ankle" "knee" "tib-fib" "femur" "patella" "calcaneus" "skull" "sinuses" "facial-bones" "orbits" "zygomatic-arches" "nasal-bones" "mandible" "tmj" "cspine" "tspine" "lspine" "pelvis" "hip" "sacrum" "coccyx" "sacrum-coccyx" "scoliosis" "si-joints" "abdomen" "abdomen-upright" "abdomen-decub" "ivu" "ugi" "barium-enema" "esophagram" "sbft" "cysto" "ercp" "myelo" "arthro" "hsg" "c-arm" "other")

  if [[ $# -gt 1 ]]; then
    shift
    if [[ "$1" == "-v" ]] || [[ "$1" == "--verbose" ]]; then
      local -r verbose="y"
    else
      local -r verbose="n"
    fi
  else
    local -r verbose="n"
  fi

  for exam in "${list_of_exams[@]}"; do
    # First, filter to a tmpjson containing only entries for that exam
    local tmpjson
    tmpjson="$(jq -r ".data[] | select(.exam_type == \"${exam}\")" "${DATA_FILE}" | jq -r -s .)"

    if [[ "${tmpjson}" == "[]" ]]; then
      continue
    fi

    print_header "Exam type: ${exam}"

    # Print repeat rate
    analyze_helper "exam_type" "${exam}" "${exam}"

    # Print a numbered (count) list of repeats on different equipment
    printf "\nMost repeats on different equipment:\n"
    jq -r ".data[] | select(.repeat_exposures >= 1) | select(.exam_type == \"${exam}\").equipment" "${DATA_FILE}" | sed '/^$/d' | sed 's/ /\n/g' | sort | uniq -c | sort -n --reverse | sed -e 's/^[ \t]*//'

    # Print a numbered (count) list of repeated VIEWS
    printf "\nMost repeated views:\n"
    jq -r ".data[] | select(.exam_type == \"${exam}\").repeated_views" "${DATA_FILE}" | sed '/^$/d' | sed 's/ /\n/g' | sort | uniq -c | sort -n --reverse | sed -e 's/^[ \t]*//'

    # Print a numbered (count) list of repeat REASONS
    printf "\nMost repeat reasons:\n"
    jq -r ".data[] | select(.exam_type == \"${exam}\").repeat_reasons" "${DATA_FILE}" | sed '/^$/d' | sed 's/ /\n/g' | sort | uniq -c | sort -n --reverse | sed -e 's/^[ \t]*//'

    # Optionally pretty print all entries
    if [[ "${verbose}" == "y" ]]; then
      printf "\nList of all entries for this exam:\n"
      # Filter to new tmpjson
      local tmpjson
      tmpjson="$(jq -r ".data[] | select(.exam_type == \"${exam}\")" "${DATA_FILE}" | jq -r -s .)"

      # For each entry, print it nicely
      local json_index=0
      local json_parser
      json_parser="$(jq -r .[${json_index}] <<< "${tmpjson}")"

      while [[ "${json_parser}" != "null" ]]; do
        show_today_helper "$(( json_index + 1 ))" "${json_parser}" &

        json_index=$(( json_index + 1 ))
        json_parser="$(jq -r .[${json_index}] <<< "${tmpjson}")"
      done

      wait

      if [[ -f "${TMP_OUTPUT}" ]]; then
        sort -n "${TMP_OUTPUT}"
        printf "\n"
      else
        printf "\nNo exams yet\n"
      fi
    else
      printf "\n"
    fi

    # Need to flush output file
    printf "" > "${TMP_OUTPUT}"
  done
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

[[ ! -d "${DATA_DIR}" ]] &&
  mkdir -p "${DATA_DIR}"

# Create data file if not exists
if [[ ! -f "${DATA_FILE_PERM}" ]]; then
  printf "{\"data\": []}" > "${DATA_FILE}"
  brotli -q 7 -f "${DATA_FILE}" -o "${DATA_FILE_PERM}"
elif [[ -f "${DATA_FILE_PERM}" ]]; then
  # If data file already exists, check for compression, uncompress if compressed
  # Back up data first
  cp "${DATA_FILE_PERM}" "${DATA_FILE_PERM}.old"
  brotli -d "${DATA_FILE_PERM}" -o "${DATA_FILE}"
fi

if [[ -z "${1:-}" ]]; then
  exit_script_on_failure "Please enter a valid command. Execute \`ket help\` to list all commands."
fi

case "$1" in
  all) show_all ;;
  analyze) analyze_master "$@" ;;
  new) new_entry ;;
  today) show_today ;;
  list) list_master "$@" ;;
  delete-last) delete_last_entry ;;
  help) print_help ;;
  *) exit_script_on_failure "Please enter a valid command. Execute \`ket help\` to list all commands."
esac

# Re-compress data file
brotli -q 7 -f "${DATA_FILE}" -o "${DATA_FILE_PERM}"
